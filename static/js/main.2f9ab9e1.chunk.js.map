{"version":3,"sources":["Slide.js","Slider.js","assets/1.jpg","index.js"],"names":["Slide","this","props","content","bgImage","bgColor","className","style","backgroundImage","backgroundColor","React","Component","Slider","state","transformSpeed","currentSlide","slide","transform","nextSlide","bind","prevSlide","dotClick","sliderMouseEnter","sliderMouseLeave","handleLastSlide","handleFirstSlide","handleTouchStart","handleTouchEnd","handleAutoplay","window","addEventListener","e","key","touchendX","touchstartX","event","nativeEvent","changedTouches","screenX","handleGesure","setState","data","length","sliderContainer","document","getElementById","removeEventListener","currentDot","parseInt","currentTarget","getAttribute","dotsContent","i","dotClassName","push","data-dot-index","onClick","slides","slideArray","id","forEach","item","index","autoplay","slideInterval","setInterval","autoplayTime","clearInterval","buttonContainer","buttons","dotContainer","dots","getDots","onMouseEnter","onMouseLeave","onTouchStart","onTouchEnd","transition","getSlide","ReactDOM","render","display","alignItems","justifyContent","height","bg","color"],"mappings":"6PAEqBA,E,4JACjB,WAAW,IAAD,EACgCC,KAAKC,MAAnCC,EADF,EACEA,QAASC,EADX,EACWA,QAASC,EADpB,EACoBA,QAE1B,OACI,qBAAKC,UAAW,QAASC,MAAO,CAACC,gBAAgB,OAAD,OAASJ,EAAT,KAAqBK,gBAAgB,GAAD,OAAKJ,IAAzF,SACKF,Q,GANkBO,IAAMC,WCEpBC,E,kDACnB,WAAaV,GAAQ,IAAD,uBAClB,cAAMA,IAEDW,MAAQ,CACTC,eAAgB,GAChBC,aAAc,CACZC,MAAO,EACPC,WAAY,MAIlB,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBACjB,EAAKC,UAAY,EAAKA,UAAUD,KAAf,gBACjB,EAAKE,SAAW,EAAKA,SAASF,KAAd,gBAChB,EAAKG,iBAAmB,EAAKA,iBAAiBH,KAAtB,gBACxB,EAAKI,iBAAmB,EAAKA,iBAAiBJ,KAAtB,gBACxB,EAAKK,gBAAkB,EAAKA,gBAAgBL,KAArB,gBACvB,EAAKM,iBAAmB,EAAKA,iBAAiBN,KAAtB,gBACxB,EAAKO,iBAAmB,EAAKA,iBAAiBP,KAAtB,gBACxB,EAAKQ,eAAiB,EAAKA,eAAeR,KAApB,gBAEtB,EAAKS,iBAELC,OAAOC,iBAAiB,WAAW,SAACC,GACpB,eAAVA,EAAEC,IACJ,EAAKd,YACc,cAAVa,EAAEC,KACX,EAAKZ,eA3BS,S,gDAmCpB,WACMnB,KAAKgC,UAAYhC,KAAKiC,aACtBjC,KAAKiB,YAELjB,KAAKgC,UAAYhC,KAAKiC,aACtBjC,KAAKmB,c,8BAIX,SAAkBe,GAChBlC,KAAKiC,YAAcC,EAAMC,YAAYC,eAAe,GAAGC,U,4BAGzD,SAAgBH,GACdlC,KAAKgC,UAAYE,EAAMC,YAAYC,eAAe,GAAGC,QACrDrC,KAAKsC,iB,6BAGP,WACEtC,KAAKuC,SAAS,CACZ1B,eAAgB,EAChBC,aAAc,CACZC,MAAO,EACPC,WAAY,S,8BAKlB,WACEhB,KAAKuC,SAAS,CACZ1B,eAAgB,EAChBC,aAAc,CACZC,MAAOf,KAAKC,MAAMuC,KAAKC,OACvBzB,WAAsC,IAAzBhB,KAAKC,MAAMuC,KAAKC,Y,uBAKnC,WACE,IAAIC,EAAkBC,SAASC,eAAe,oBAC9CF,EAAgBG,oBAAoB,gBAAiB7C,KAAKuB,iBAC1DvB,KAAKuC,SAAS,CACZ1B,eAAgB,KAGdb,KAAKY,MAAME,aAAaC,QAAUf,KAAKC,MAAMuC,KAAKC,QACpDzC,KAAKuC,SAAS,CACZzB,aAAc,CACZC,MAAO,EACPC,UAAWhB,KAAKY,MAAME,aAAaE,UAAY,OAGnD0B,EAAgBb,iBAAiB,gBAAiB7B,KAAKuB,kBAEvDvB,KAAKuC,SAAS,CACZzB,aAAc,CACZC,MAAOf,KAAKY,MAAME,aAAaC,MAAQ,EACvCC,UAAWhB,KAAKY,MAAME,aAAaE,UAAY,S,uBAMvD,WACE,IAAI0B,EAAkBC,SAASC,eAAe,oBAC9CF,EAAgBG,oBAAoB,gBAAiB7C,KAAKwB,kBAC1DxB,KAAKuC,SAAS,CACZ1B,eAAgB,KAGoB,IAAlCb,KAAKY,MAAME,aAAaC,OAC1Bf,KAAKuC,SAAS,CACZzB,aAAc,CACZC,MAAOf,KAAKC,MAAMuC,KAAKC,OACvBzB,UAAWhB,KAAKY,MAAME,aAAaE,UAAY,OAGnD0B,EAAgBb,iBAAiB,gBAAiB7B,KAAKwB,mBAEvDxB,KAAKuC,SAAS,CACZzB,aAAc,CACZC,MAAOf,KAAKY,MAAME,aAAaC,MAAQ,EACvCC,UAAWhB,KAAKY,MAAME,aAAaE,UAAY,S,sBAMvD,SAAUkB,GACR,IAAIY,EAAaC,SAASb,EAAMc,cAAcC,aAAa,mBAC3DjD,KAAKuC,SAAS,CACZzB,aAAc,CACZC,MAAO+B,EACP9B,WAA0B,IAAb8B,O,qBAKnB,WAEE,IADA,IAAII,EAAc,GACTC,EAAI,EAAGA,EAAInD,KAAKC,MAAMuC,KAAKC,OAAQU,IAAK,CAC/C,IAAIC,EAAe,MACfD,EAAI,IAAMnD,KAAKY,MAAME,aAAaC,QAClCqC,GAAgB,eAEpBF,EAAYG,KAAK,wBAAQhD,UAAW+C,EAAcE,iBAAgBH,EAAI,EAAoBI,QAASvD,KAAKoB,UAAvF,cAAoE+B,KAEvF,OAAOD,I,sBAGT,WACE,IAAIM,EAAS,GACTC,EAAazD,KAAKC,MAAMuC,KAiC5B,OA/BAgB,EAAOH,KACL,cAAC,EAAD,CAEIK,GAAI,sBACJvD,QAASsD,EAAWA,EAAWhB,OAAS,GAAGtC,QAC3CC,QAASqD,EAAWA,EAAWhB,OAAS,GAAGrC,QAC3CF,QAASuD,EAAWA,EAAWhB,OAAS,GAAGvC,SAJtC,wBAQXuD,EAAWE,SAAQ,SAACC,EAAMC,GACxBL,EAAOH,KACL,cAAC,EAAD,CAEElD,QAASyD,EAAKzD,QACdC,QAASwD,EAAKxD,QACdF,QAAS0D,EAAK1D,SAJhB,gBACgB2D,QAQpBL,EAAOH,KACL,cAAC,EAAD,CAEIK,GAAI,uBACJvD,QAASsD,EAAW,GAAGtD,QACvBC,QAASqD,EAAW,GAAGrD,QACvBF,QAASuD,EAAW,GAAGvD,SAJlB,yBAQJsD,I,4BAGT,WACMxD,KAAKC,MAAM6D,WACb9D,KAAK+D,cAAgBC,YAAYhE,KAAKiB,UAAWjB,KAAKC,MAAMgE,iB,8BAIhE,WACEC,cAAclE,KAAK+D,iB,8BAGrB,WACM/D,KAAKC,MAAM6D,WACb9D,KAAK+D,cAAgBC,YAAYhE,KAAKiB,UAAWjB,KAAKC,MAAMgE,iB,oBAIhE,WACE,IAAIE,EAAkB,KAClBnE,KAAKC,MAAMmE,UACbD,EACE,sBAAK9D,UAAU,UAAf,UACE,mBAAGA,UAAU,4BAA4BkD,QAASvD,KAAKmB,YACvD,mBAAGd,UAAU,6BAA6BkD,QAASvD,KAAKiB,gBAI9D,IAAIoD,EAAe,KAKnB,OAJIrE,KAAKC,MAAMqE,OACbD,EAAe,qBAAKhE,UAAU,OAAf,SAAkCL,KAAKuE,WAAb,SAIzC,sBAAKlE,UAAU,SAASmE,aAAcxE,KAAKqB,iBAAkBoD,aAAczE,KAAKsB,iBAAkBoD,aAAc1E,KAAKyB,iBAAkBkD,WAAY3E,KAAK0B,eAAxJ,UACE,qBAAKrB,UAAU,mBAAmBqD,GAAG,mBAAmBpD,MAAO,CAACsE,WAAW,aAAD,OAAe5E,KAAKY,MAAMC,eAA1B,iBAAyDG,UAAU,cAAD,OAAgBhB,KAAKY,MAAME,aAAaE,UAAxC,QAA5I,SACGhB,KAAK6E,aAER,qBAAKxE,UAAU,YAAYkD,QAASvD,KAAKmB,YACzC,qBAAKd,UAAU,YAAYkD,QAASvD,KAAKiB,YACxCkD,EACAE,S,GA/N2B5D,IAAMC,WCJ3B,MAA0B,8BCMzCoE,IAASC,OACL,cAAC,EAAD,CACIjB,UAAU,EACVG,aAAc,IACdG,SAAS,EACT5B,KAAM,CACF,CACEpC,QAAS,MACTF,QACE,sBAAKI,MAAO,CAAC0E,QAAS,OAAQC,WAAY,SAAUC,eAAgB,SAAUC,OAAQ,QAAtF,mBACQ,uBADR,uDAIJ,CACE/E,QAAS,OACTF,QACE,qBAAKI,MAAO,CAAC0E,QAAS,OAAQC,WAAY,SAAUC,eAAgB,SAAUC,OAAQ,QAAtF,SACA,yEAGJ,CACE/E,QAAS,QACTF,QACE,qBAAKI,MAAO,CAAC0E,QAAS,OAAQC,WAAY,SAAUC,eAAgB,SAAUC,OAAQ,QAAtF,SACA,+EAGJ,CACE/E,QAAS,SACTF,QACE,qBAAKI,MAAO,CAAC0E,QAAS,OAAQC,WAAY,SAAUC,eAAgB,SAAUC,OAAQ,QAAtF,SACA,kDAGJ,CACEhF,QAASiF,EACTlF,QACE,qBAAKI,MAAO,CAAC0E,QAAS,OAAQC,WAAY,aAAcC,eAAgB,SAAUC,OAAQ,OAAQE,MAAO,SAAzG,SACA,2FAGJ,CACEjF,QAAS,QACTF,QACE,qBAAKI,MAAO,CAAC0E,QAAS,OAAQC,WAAY,SAAUC,eAAgB,SAAUC,OAAQ,QAAtF,SACA,oGAIRb,MAAM,IAEZ3B,SAASC,eAAe,W","file":"static/js/main.2f9ab9e1.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class Slide extends React.Component {\n    render () {\n        const { content, bgImage, bgColor } = this.props\n\n        return (\n            <div className={'slide'} style={{backgroundImage: `url(${bgImage})`, backgroundColor: `${bgColor}`}}>\n                {content}\n            </div>\n        )\n    }\n};","import React from 'react';\nimport './Styles.css';\nimport Slide from './Slide'\n\nexport default class Slider extends React.Component {\n  constructor (props) {\n    super(props)\n  \n    this.state = {\n        transformSpeed: 0.6,\n        currentSlide: {\n          slide: 1,\n          transform: -720\n        },\n    }\n    \n    this.nextSlide = this.nextSlide.bind(this)\n    this.prevSlide = this.prevSlide.bind(this)\n    this.dotClick = this.dotClick.bind(this)  \n    this.sliderMouseEnter = this.sliderMouseEnter.bind(this)\n    this.sliderMouseLeave = this.sliderMouseLeave.bind(this)  \n    this.handleLastSlide = this.handleLastSlide.bind(this)\n    this.handleFirstSlide = this.handleFirstSlide.bind(this)\n    this.handleTouchStart = this.handleTouchStart.bind(this)\n    this.handleTouchEnd = this.handleTouchEnd.bind(this)\n\n    this.handleAutoplay()\n\n    window.addEventListener('keydown', (e) => {\n      if (e.key === 'ArrowRight') {\n        this.nextSlide()\n      } else if (e.key === 'ArrowLeft') {\n        this.prevSlide()\n      }\n    })\n\n    let touchstartX = 0;\n    let touchendX = 0;\n  }\n\n  handleGesure() {\n    if (this.touchendX < this.touchstartX) {\n        this.nextSlide()\n    }\n    if (this.touchendX > this.touchstartX) {\n        this.prevSlide()\n    }\n}\n\n  handleTouchStart (event) {\n    this.touchstartX = event.nativeEvent.changedTouches[0].screenX;\n  }\n\n  handleTouchEnd (event) {\n    this.touchendX = event.nativeEvent.changedTouches[0].screenX;\n    this.handleGesure();\n  }\n\n  handleLastSlide () {\n    this.setState({\n      transformSpeed: 0,\n      currentSlide: {\n        slide: 1,\n        transform: -720\n      }\n    })\n  }\n\n  handleFirstSlide () {\n    this.setState({\n      transformSpeed: 0,\n      currentSlide: {\n        slide: this.props.data.length,\n        transform: -(this.props.data.length * 720)\n      }\n    })\n  }\n\n  nextSlide () {\n    let sliderContainer = document.getElementById('slides-container')\n    sliderContainer.removeEventListener('transitionend', this.handleLastSlide)\n    this.setState({ \n      transformSpeed: 0.6\n    })\n\n    if (this.state.currentSlide.slide === this.props.data.length) {\n      this.setState({ \n        currentSlide: {\n          slide: 1,\n          transform: this.state.currentSlide.transform - 720\n        }\n      })\n      sliderContainer.addEventListener('transitionend', this.handleLastSlide)\n    } else {\n      this.setState({ \n        currentSlide: {\n          slide: this.state.currentSlide.slide + 1,\n          transform: this.state.currentSlide.transform - 720\n        }\n      })\n    }\n  }\n\n  prevSlide () {\n    let sliderContainer = document.getElementById('slides-container')\n    sliderContainer.removeEventListener('transitionend', this.handleFirstSlide)\n    this.setState({ \n      transformSpeed: 0.6\n    })\n\n    if (this.state.currentSlide.slide === 1) {\n      this.setState({ \n        currentSlide: {\n          slide: this.props.data.length,\n          transform: this.state.currentSlide.transform + 720\n        }\n      })\n      sliderContainer.addEventListener('transitionend', this.handleFirstSlide)\n    } else {\n      this.setState({ \n        currentSlide: {\n          slide: this.state.currentSlide.slide - 1,\n          transform: this.state.currentSlide.transform + 720\n        }\n      })\n    }\n  }\n\n  dotClick (event) {\n    let currentDot = parseInt(event.currentTarget.getAttribute('data-dot-index'));\n    this.setState({\n      currentSlide: {\n        slide: currentDot,\n        transform: -(currentDot * 720)\n      }\n    })\n  }\n\n  getDots () {\n    let dotsContent = [];\n    for (let i = 0; i < this.props.data.length; i++) {\n      let dotClassName = \"dot\";\n      if (i + 1 === this.state.currentSlide.slide) {\n          dotClassName += \" active-dot\";\n      }\n      dotsContent.push(<button className={dotClassName} data-dot-index={i + 1} key={`dot-${i}`} onClick={this.dotClick}></button>)\n    }\n    return dotsContent;\n  }\n\n  getSlide () {\n    let slides = [];\n    let slideArray = this.props.data\n    \n    slides.push(\n      <Slide\n          key={'DuplicatedLastSlide'}\n          id={'DuplicatedLastSlide'}\n          bgImage={slideArray[slideArray.length - 1].bgImage}\n          bgColor={slideArray[slideArray.length - 1].bgColor}\n          content={slideArray[slideArray.length - 1].content}\n        />\n    )\n\n    slideArray.forEach((item, index) => {\n      slides.push(\n        <Slide\n          key={`slide-${index}`}\n          bgImage={item.bgImage}\n          bgColor={item.bgColor}\n          content={item.content}\n        />\n      )\n    })\n\n    slides.push(\n      <Slide\n          key={'DuplicatedFirstSlide'}\n          id={'DuplicatedFirstSlide'}\n          bgImage={slideArray[0].bgImage}\n          bgColor={slideArray[0].bgColor}\n          content={slideArray[0].content}\n        />\n    )\n\n    return slides;\n  }\n\n  handleAutoplay () {\n    if (this.props.autoplay) {\n      this.slideInterval = setInterval(this.nextSlide, this.props.autoplayTime);\n    }\n  }\n\n  sliderMouseEnter () {\n    clearInterval(this.slideInterval);\n  }\n\n  sliderMouseLeave () {\n    if (this.props.autoplay) {\n      this.slideInterval = setInterval(this.nextSlide, this.props.autoplayTime);\n    }\n  }\n\n  render () {\n    let buttonContainer = null\n    if (this.props.buttons) {\n      buttonContainer = (\n        <div className=\"buttons\">\n          <i className=\"fas fa-arrow-left prevBtn\" onClick={this.prevSlide}></i>\n          <i className=\"fas fa-arrow-right nextBtn\" onClick={this.nextSlide}></i>\n        </div>\n      )\n    }\n    let dotContainer = null\n    if (this.props.dots) {\n      dotContainer = <div className=\"dots\" key=\"dots\">{this.getDots()}</div>\n    }\n\n    return (\n      <div className=\"slider\" onMouseEnter={this.sliderMouseEnter} onMouseLeave={this.sliderMouseLeave} onTouchStart={this.handleTouchStart} onTouchEnd={this.handleTouchEnd}>\n        <div className=\"slides-container\" id=\"slides-container\" style={{transition: `transform ${this.state.transformSpeed}s ease-in-out`, transform: `translateX(${this.state.currentSlide.transform}px)`}}>\n          {this.getSlide()}\n        </div>\n        <div className=\"prevSlide\" onClick={this.prevSlide} ></div>\n        <div className=\"nextSlide\" onClick={this.nextSlide} ></div>\n        {buttonContainer}\n        {dotContainer}\n      </div>\n    )\n  }\n};","export default __webpack_public_path__ + \"static/media/1.740c51df.jpg\";","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Slider from './Slider';\n\nimport bg from './assets/1.jpg'\n\nReactDOM.render(\n    <Slider \n        autoplay={false}\n        autoplayTime={4000}\n        buttons={false}\n        data={[\n            {\n              bgColor: 'red',\n              content: (\n                <div style={{display: 'flex', alignItems: 'center', justifyContent: 'center', height: '100%'}}>\n                  Hello!<br/>This is a simple demonstration of slider content</div>\n              )\n            },\n            {\n              bgColor: 'blue',\n              content: (\n                <div style={{display: 'flex', alignItems: 'center', justifyContent: 'center', height: '100%'}}>\n                <h1>Simply add an H1 tag in the content!</h1></div>\n              )\n            },\n            {\n              bgColor: 'green',\n              content: (\n                <div style={{display: 'flex', alignItems: 'center', justifyContent: 'center', height: '100%'}}>\n                <h2>Yes! You should play around with styles...</h2></div>\n              )\n            },\n            {\n              bgColor: 'orange',\n              content: (\n                <div style={{display: 'flex', alignItems: 'center', justifyContent: 'center', height: '100%'}}>\n                <p>And you can!!!</p></div>\n              )\n            },\n            {\n              bgImage: bg,\n              content: (\n                <div style={{display: 'flex', alignItems: 'flex-start', justifyContent: 'center', height: '100%', color: 'white'}}>\n                <p>Here is a case of using a background image initially...</p></div>\n              )\n            },\n            {\n              bgColor: 'brown',\n              content: (\n                <div style={{display: 'flex', alignItems: 'center', justifyContent: 'center', height: '100%'}}>\n                <span>Technically I could include a button here, but I put a SPAN!</span></div>\n              )\n            }\n          ]}\n        dots={true}\n    />\n, document.getElementById('root'));\n"],"sourceRoot":""}